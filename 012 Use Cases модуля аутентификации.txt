CQS - Command Query Segregation

Command - методы, которые что-то модифицируют
POST, PUT, PATCH
Чаще всего ничего не возвращают

Query - методы, которые что-то считывают
GET
Возвращают результат

useCase - процедура или функция, которая говорит что с этим элементом можно сделать.
Доменная модель - сущности, сервисы.

Use Case
    Command
    Query


----------------

Join By Email
    Request
        Command
        Handler
    Confirm
        Command
        Handler

Join By Network

Attach Network

Reset Password
    Request
    Reset

Change Email
    Request
    Confirm

Change Role

----------------

Хотелось бы узнать а как транзакции реализуются при таком подходе,
предположим зарегистрировали пользователя (пользователь нужен сразу в контексте авторизации, автора и покупателя),
это посути записи в три отдельных контекста. Пользователь валидный только если он присутствует во
всех трёх контекстах одновременно (по разным причинам).
Нам по сути по одному действию (регистрации) нужно кинуть три команды сразу.
Две у нас выполняется, третья крашится. По условию пользователь не валидный,
что делать в таком случае? В транзакцию это дело не завернешь, ну и две предыдущие нужно откатить как то ?

Саги как раз и придуманы для осуществления таких транзакций нескольких агрегатов
из нескольких контекстов с откатом изменений при ошибке.
Сага напрямую или по событию регистрации отправляет эти команды во все модули.
И в случае сообщения об ошибке от любого модуля компенсирующими командами откатывает все предыдущие.
















